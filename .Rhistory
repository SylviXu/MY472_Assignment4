# Write the table into my relational database.
con <- dbConnect(RSQLite::SQLite(), dbname = db_path)
dbWriteTable(con, "ARWU_ranks", ARWU_Rank, row.names = FALSE, overwrite = TRUE)
# Function to check table existence and dimensionality
checkTable("my_database.sqlite", "ARWU_ranks")
# Create your database connection.
con <- dbConnect(RSQLite::SQLite(), dbname = db_path)
# Write the tidy table to your database.
dbWriteTable(con, "Exercise2_Universities_Data", complete_data, row.names = FALSE, overwrite = TRUE)
# Create a primary key.
dbExecute(con, "CREATE UNIQUE INDEX pk_Institution ON Exercise2_Universities_Data(Institution)")
checkTable <- function(database_name, table_name) {
# Connect to the database
#con <- dbConnect(RSQLite::SQLite(), dbname = database_name)
# Check if the table exists
if (dbExistsTable(con, table_name)) {
# Get the table information
table_info <- dbGetQuery(con, paste0("PRAGMA table_info(", table_name, ")"))
# Get number of rows and columns
table_dimensions <- dbGetQuery(con, paste0("SELECT COUNT(*) AS num_rows, COUNT(*) AS num_columns FROM ", table_name))
# Get column names
column_names <- table_info$name
# Output information
cat("Number of Rows:", table_dimensions$num_rows, "\n")
cat("Number of Columns:", table_dimensions$num_columns, "\n")
cat("Column Names:", column_names, "\n")
} else {
cat("The table does not exist.")
}
# Close the database connection
dbDisconnect(con)
}
checkTable("my_database.sqlite", "Exercise2_Universities_Data")
# Transfer the dataframe into a sf object.
coordinates <- st_as_sf(analysis_data2, coords = c("Longitude", "Latitude"), crs = 4326)
# Get a shapefile of the US by calling status().
us_shapefile <- states()
# Switch the map mode to "view".
tmap_mode("view")
# Generate a map displaying the distribution of research universities of the US.
tm_shape(us_shapefile, bbox = c(left = -130, bottom = 24, right = -65, top = 50))+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.3)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.5, )+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
# Transfer the dataframe into a sf object.
coordinates <- st_as_sf(analysis_data2, coords = c("Longitude", "Latitude"), crs = 4326)
# Get a shapefile of the US by calling status().
us_shapefile <- states()
# Switch the map mode to "view".
tmap_mode("view")
# Generate a map displaying the distribution of research universities of the US.
tm_shape(us_shapefile, bbox = c(left = -130, bottom = 24, right = -65, top = 50))+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, )+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
coordinates
tm_shape(us_shapefile, bbox = c(left = -130, bottom = 24, right = -65, top = 50))+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "IvyLeague_Member", size = 0.3)+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
tm_shape(us_shapefile, bbox = c(left = -130, bottom = 24, right = -65, top = 50))+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title.col = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
urban <- urban_areas()
urban
tm_shape(urban) + tm_fill(col = NAME10, alpha = 0.6)
urban
tm_shape(urban) + tm_fill(col = "NAME10", alpha = 0.6)
tm_shape(us_shapefile)+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_shape(urban, bbox = c(left = -130, bottom = 24, right = -65, top = 50)) + tm_fill(col = "NAME10", alpha = 0.6, title = "Urban Areas")+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
tm_shape(us_shapefile)+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_shape(urban, bbox = c(left = -130, bottom = 24, right = -65, top = 50)) + tm_fill(col = "NAME10", alpha = 0.6, title = "Urban Areas")+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title.col = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
tm_shape(urban, bbox = c(left = -130, bottom = 24, right = -65, top = 50)) + tm_fill(col = "NAME10", alpha = 0.6, title = "Urban Areas")
tm_shape(us_shapefile)+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(urban, bbox = c(left = -130, bottom = 24, right = -65, top = 50)) + tm_fill(col = "NAME10", alpha = 0.6, title = "Urban Areas")+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title.col = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
tm_shape(us_shapefile)+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title.col = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
tm_shape(us_shapefile, bbox = c(left = -130, bottom = 24, right = -65, top = 50))+
tm_borders(col = "lightgrey", lwd = 1, alpha = 0.7)+
tm_text("NAME", size = 0.7)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "No", ]) + # Filter out non-Ivy League members.
tm_bubbles(col = "Status", size = 0.2)+
tm_shape(coordinates[coordinates$IvyLeague_Member == "Yes", ]) + # Filter out Ivy League Members.
tm_bubbles(col = "orange", size = 0.3, title.col = "Ivy League Member")+
tm_layout(legend.position = c("right", "bottom"), title = "Figure5. Mapping of Research Institutions in the United States")
# Generate a plot, showing the relationship between average revenue per student and average median household income.
plot4 <- analysis_table %>%
ggplot()+
# Add a line to the plot, showing average revenue per student of each institution.
geom_line(aes(Institution, Avg_Revenue_Per_Student, group = "", color = "average revenue per student"), size = 0.8)+
geom_text(aes(Institution, Avg_Revenue_Per_Student, label = round(Avg_Revenue_Per_Student)), family = "Arial", size = 2.5, vjust = -0.5)+
geom_point(aes(Institution, Avg_Revenue_Per_Student), size = 2.5, color = "skyblue", alpha = 0.8)+
# Add another line to the plot, showing average median household income of each county where each institution locates at.
geom_line(aes(Institution, Avg_median_household_income, group = "", color = "average median household income")) +
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "orange", alpha = 0.6)+
# Edit the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("Figure4. Relationships between average revenue per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
panel.border = element_blank(),
axis.title.x = element_blank())
# View the plot.
plot4
# Generate a plot, showing the relationship between average endowment per student and average median household income.
plot3 <- analysis_table %>%
ggplot() +
# Create two lines, one of which illustrates average median household income, and another of which shows average endowment per student of each institution.
geom_line(aes(Institution, Avg_median_household_income, color = "average median household income", group = ""), size = 0.8, alpha = 0.6) +
geom_line(aes(Institution, Endowment_per_Student, group = "", color = "average endowment per student"), size = 0.8, alpha = 0.6) +
# Add points to make it more clear.
geom_point(aes(Institution, Endowment_per_Student), size = 2.5, color = "orange", alpha = 0.6)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "lightblue", alpha = 0.6)+
# Add text labels.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("Figure3. Relationships between average endowment per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank())
# View the plot.
plot3
# Generate a plot, showing the relationship between average university ranking and endowment per student.
plot2 <- analysis_table %>%
ggplot() +
aes(x = Institution)+
# Add bars to the plot, indicating endowment per student of each university.
geom_bar(aes(y = Endowment_per_Student, fill = "Endowment Per Student"), stat = "identity", alpha = 0.8, width = 0.7) +
# Add a line and points to the plot, showing each university's average ranking.
geom_line(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), group = "", color = "Average Rank"), size = 0.8) +
geom_point(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), color = "Average Rank"), size = 3, alpha = 0.6) +
# Add ranking text.
geom_text(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), label = Avg_ranking), family = "Arial", size = 3, vjust = 1.5)+
# Add endowment numbers.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the legends.
guides(fill = guide_legend(title = "", override.aes = list(color = NULL)),
color = guide_legend(title = "", override.aes = list(fill = "orange", linetype = 1))) +
scale_fill_manual(values = "skyblue") +
# Set up the theme.
theme_bw() +
expand_limits(y = 0) +
ggtitle("Figure2. Relationships between average university ranking and endowment per student") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank()
)
# View the plot.
plot2
# Load ggplot package.
library(ggplot2)
# Generate a plot showing the relationship between average university ranking and average Econ/PS/Soc ranking.
plot1 <- analysis_table %>%
ggplot()+
# Add lines and points indicating average ranking and average Econ/PS/Soc ranking.
geom_line(aes(Institution, Avg_ranking, group = "", color = "Average Rank"), size = 0.8)+
geom_point(aes(x= Institution, y = Avg_ranking),size = 2.5, color = "orange", alpha = 0.6)+
geom_line(aes(Institution, Economics_Rank, group = "", color = "Economics Rank"), size = 0.8)+
geom_point(aes(Institution, Economics_Rank), size = 2.5, color = "lightblue", alpha = 0.8)+
geom_line(aes(Institution, analysis_table$Political_Science_Rank, group = "",color = "Political Science Rank"), size = 0.8)+
geom_point(aes(Institution, analysis_table$Political_Science_Rank), size = 2.5, color = "pink", alpha = 0.8)+
geom_line(aes(Institution, Sociology_Rank, group = "",color = "Sociology Rank"), size = 0.8, alpha = 0.6)+
geom_point(aes(Institution, Sociology_Rank), size = 2.5, color = "green", alpha = 0.6)+
# To make the vision more straightforward, I consider it better to reverse the y axis so that the higher ranking an institution obtains, the higher position of the point locates.
scale_y_reverse()+
# Set the theme of the plot.
theme_bw()+
scale_color_manual(values = c("Average Rank" = "orange", "Economics Rank" = "lightblue", "Political Science Rank" = "pink", "Sociology Rank" = "green"))+
labs(color = "")+
labs(x = "Institution", y = "Rank") +
ggtitle("Figure1. Relationships between average university ranking and average subject ranking")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank())
# View the plot.
plot1
# Generate a plot, showing the relationship between average university ranking and endowment per student.
plot2 <- analysis_table %>%
ggplot() +
aes(x = Institution)+
# Add bars to the plot, indicating endowment per student of each university.
geom_bar(aes(y = Endowment_per_Student, fill = "Endowment Per Student"), stat = "identity", alpha = 0.8, width = 0.7) +
# Add a line and points to the plot, showing each university's average ranking.
geom_line(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), group = "", color = "Average Rank"), size = 0.8) +
geom_point(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), color = "Average Rank"), size = 3, alpha = 0.6) +
# Add ranking text.
geom_text(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), label = Avg_ranking), family = "Arial", size = 3, vjust = 1.5)+
# Add endowment numbers.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the legends.
guides(fill = guide_legend(title = "", override.aes = list(color = NULL)),
color = guide_legend(title = "", override.aes = list(fill = "orange", linetype = 1))) +
scale_fill_manual(values = "skyblue") +
# Set up the theme.
theme_bw() +
expand_limits(y = 0) +
ggtitle("Figure2. Relationships between average university ranking and endowment per student") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 16)
)
# View the plot.
plot2
# Generate a plot, showing the relationship between average university ranking and endowment per student.
plot2 <- analysis_table %>%
ggplot() +
aes(x = Institution)+
# Add bars to the plot, indicating endowment per student of each university.
geom_bar(aes(y = Endowment_per_Student, fill = "Endowment Per Student"), stat = "identity", alpha = 0.8, width = 0.7) +
# Add a line and points to the plot, showing each university's average ranking.
geom_line(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), group = "", color = "Average Rank"), size = 0.8) +
geom_point(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), color = "Average Rank"), size = 3, alpha = 0.6) +
# Add ranking text.
geom_text(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), label = Avg_ranking), family = "Arial", size = 3, vjust = 1.5)+
# Add endowment numbers.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the legends.
guides(fill = guide_legend(title = "", override.aes = list(color = NULL)),
color = guide_legend(title = "", override.aes = list(fill = "orange", linetype = 1))) +
scale_fill_manual(values = "skyblue") +
# Set up the theme.
theme_bw() +
expand_limits(y = 0) +
ggtitle("Figure2. Relationships between average university ranking and endowment per student") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 11)
)
# View the plot.
plot2
# Generate a plot, showing the relationship between average endowment per student and average median household income.
plot3 <- analysis_table %>%
ggplot() +
# Create two lines, one of which illustrates average median household income, and another of which shows average endowment per student of each institution.
geom_line(aes(Institution, Avg_median_household_income, color = "average median household income", group = ""), size = 0.8, alpha = 0.6) +
geom_line(aes(Institution, Endowment_per_Student, group = "", color = "average endowment per student"), size = 0.8, alpha = 0.6) +
# Add points to make it more clear.
geom_point(aes(Institution, Endowment_per_Student), size = 2.5, color = "orange", alpha = 0.6)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "lightblue", alpha = 0.6)+
# Add text labels.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("Figure3. Relationships between average endowment per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 11)
# View the plot.
plot3
# Generate a plot, showing the relationship between average endowment per student and average median household income.
plot3 <- analysis_table %>%
ggplot() +
# Create two lines, one of which illustrates average median household income, and another of which shows average endowment per student of each institution.
geom_line(aes(Institution, Avg_median_household_income, color = "average median household income", group = ""), size = 0.8, alpha = 0.6) +
geom_line(aes(Institution, Endowment_per_Student, group = "", color = "average endowment per student"), size = 0.8, alpha = 0.6) +
# Add points to make it more clear.
geom_point(aes(Institution, Endowment_per_Student), size = 2.5, color = "orange", alpha = 0.6)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "lightblue", alpha = 0.6)+
# Add text labels.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("Figure3. Relationships between average endowment per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 11))
# View the plot.
plot3
# Generate a plot, showing the relationship between average endowment per student and average median household income.
plot3 <- analysis_table %>%
ggplot() +
# Create two lines, one of which illustrates average median household income, and another of which shows average endowment per student of each institution.
geom_line(aes(Institution, Avg_median_household_income, color = "average median household income", group = ""), size = 0.8, alpha = 0.6) +
geom_line(aes(Institution, Endowment_per_Student, group = "", color = "average endowment per student"), size = 0.8, alpha = 0.6) +
# Add points to make it more clear.
geom_point(aes(Institution, Endowment_per_Student), size = 2.5, color = "orange", alpha = 0.6)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "lightblue", alpha = 0.6)+
# Add text labels.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("F3. Relationships between average endowment per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 11))
# View the plot.
plot3
# Generate a plot, showing the relationship between average university ranking and endowment per student.
plot2 <- analysis_table %>%
ggplot() +
aes(x = Institution)+
# Add bars to the plot, indicating endowment per student of each university.
geom_bar(aes(y = Endowment_per_Student, fill = "Endowment Per Student"), stat = "identity", alpha = 0.8, width = 0.7) +
# Add a line and points to the plot, showing each university's average ranking.
geom_line(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), group = "", color = "Average Rank"), size = 0.8) +
geom_point(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), color = "Average Rank"), size = 3, alpha = 0.6) +
# Add ranking text.
geom_text(aes(y = 4300000-analysis_table$Avg_ranking * max(analysis_table$Endowment_per_Student) / max(analysis_table$Avg_ranking), label = Avg_ranking), family = "Arial", size = 3, vjust = 1.5)+
# Add endowment numbers.
geom_text(aes(Institution, Endowment_per_Student, label = paste(round(Endowment_per_Student/10^6, 2), "million")), family = "Arial", size = 2.5, vjust = -0.5)+
# Set up the legends.
guides(fill = guide_legend(title = "", override.aes = list(color = NULL)),
color = guide_legend(title = "", override.aes = list(fill = "orange", linetype = 1))) +
scale_fill_manual(values = "skyblue") +
# Set up the theme.
theme_bw() +
expand_limits(y = 0) +
ggtitle("F2. Relationships between average university ranking and endowment per student") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
axis.title.x = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 11)
)
# View the plot.
plot2
# Generate a plot, showing the relationship between average revenue per student and average median household income.
plot4 <- analysis_table %>%
ggplot()+
# Add a line to the plot, showing average revenue per student of each institution.
geom_line(aes(Institution, Avg_Revenue_Per_Student, group = "", color = "average revenue per student"), size = 0.8)+
geom_text(aes(Institution, Avg_Revenue_Per_Student, label = round(Avg_Revenue_Per_Student)), family = "Arial", size = 2.5, vjust = -0.5)+
geom_point(aes(Institution, Avg_Revenue_Per_Student), size = 2.5, color = "skyblue", alpha = 0.8)+
# Add another line to the plot, showing average median household income of each county where each institution locates at.
geom_line(aes(Institution, Avg_median_household_income, group = "", color = "average median household income")) +
geom_text(aes(Institution, Avg_median_household_income, label = Avg_median_household_income), family = "Arial", size = 2.5, vjust = -0.5)+
geom_point(aes(Institution, Avg_median_household_income), size = 2.5, color = "orange", alpha = 0.6)+
# Edit the labs.
labs(color = "",
y = "USD")+
# Set up the theme.
theme_light()+
ggtitle("F4. Relationships between average revenue per student and average median household income")+
theme(axis.text.x = element_text(angle = 30, hjust = 1),
panel.border = element_blank(),
axis.title.x = element_blank(),
plot.title = element_text(size = 11)
)
# View the plot.
plot4
# Create a checking function.
checkTable <- function(database_name, table_name) {
# Connect to the database
#con <- dbConnect(RSQLite::SQLite(), dbname = database_name)
# Check if the table exists
if (dbExistsTable(con, table_name)) {
# Get the table information
table_info <- dbGetQuery(con, paste0("PRAGMA table_info(", table_name, ")"))
# Get number of rows and columns
table_dimensions <- dbGetQuery(con, paste0("SELECT COUNT(*) AS num_rows, COUNT(*) AS num_columns FROM ", table_name))
# Get column names
column_names <- table_info$name
# Output information
cat("Number of Rows:", table_dimensions$num_rows, "\n")
cat("Number of Columns:", table_dimensions$num_columns, "\n")
cat("Column Names:", column_names, "\n")
} else {
cat("The table does not exist.")
}
# Close the database connection
dbDisconnect(con)
}
checkTable("my_database.sqlite", "Exercise2_Universities_Data")
# Create a checking function.
checkTable <- function(database_name, table_name) {
# Connect to the database
#con <- dbConnect(RSQLite::SQLite(), dbname = database_name)
# Check if the table exists
if (dbExistsTable(con, table_name)) {
# Get the table information
table_info <- dbGetQuery(con, paste0("PRAGMA table_info(", table_name, ")"))
# Get number of rows and columns
table_dimensions <- dbGetQuery(con, paste0("SELECT COUNT(*) AS num_rows, COUNT(*) AS num_columns FROM ", table_name))
# Get column names
column_names <- table_info$name
# Output information
cat("Number of Rows:", table_dimensions$num_rows, "\n")
cat("Number of Columns:", table_dimensions$num_columns, "\n")
cat("Column Names:", column_names, "\n")
} else {
cat("The table does not exist.")
}
# Close the database connection
dbDisconnect(con)
}
con <- dbConnect(RSQLite::SQLite(), dbname = db_path)
checkTable("my_database.sqlite", "Exercise2_Universities_Data")
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(echo = FALSE)
urban
# Transfer the dataframe into a sf object.
coordinates <- st_as_sf(analysis_data2, coords = c("Longitude", "Latitude"), crs = 4326)
library(RSelenium)
library(tidyverse)
library(rvest)
library(xml2)
library(netstat)
library(DBI)
library(RSQLite)
# Transfer the dataframe into a sf object.
coordinates <- st_as_sf(analysis_data2, coords = c("Longitude", "Latitude"), crs = 4326)
install.packages('spotifyr')
library(spotifyr)
library(tidyverse)
library(knitr)
setwd("E:/文件/LSE/MY472/MY472_Assignment4")
# Read my client id and secret from a local file.
readRenviron("E:\文件\LSE\MY472\spotify id&secret.env")
# Read my client id and secret from a local file.
readRenviron("E:/文件/LSE/MY472/spotify id&secret.env")
id <- Sys.getenv("id")
secret <- Sys.getenv("secret")
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
access_token <- get_spotify_access_token()
access_token <- get_spotify_access_token()
test <- get_artist_audio_features('the beatles')
View(test)
View(test[[5]][[86]])
library(httr)
set_config(use_proxy(url="10.3.100.207",port=8080))
test <- get_artist_audio_features('the beatles')
test <- get_artist_audio_features('the beatles')
library(httr)
artists <- GET("https://api.spotify.com/v1/artists", query = list(ids="2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"))
library(RSelenium)
library(rvest)
library(xml2)
rD <- rsDriver(browser=c("firefox"), verbose = F, port = 2345L, chromever = NULL)
driver <- rD[["client"]]
url <- 'https://www.rollingstone.com/music/music-lists/100-greatest-artists-147446/'
driver$navigate(url)
rD <- rsDriver(browser=c("firefox"), verbose = F, port = 2345L, chromever = NULL)
rD <- rsDriver(browser=c("firefox"), verbose = F, port = 3456L, chromever = NULL)
driver <- rD[["client"]]
rD <- rsDriver(browser=c("firefox"), verbose = F, port = 4567L, chromever = NULL)
driver <- rD[["client"]]
View(test)
View(test[[23]][[1]])
