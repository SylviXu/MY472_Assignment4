search_url <- paste0('https://api.spotify.com/v1/search?q=', URLencode(artist_name), '&type=artist&limit=1')
response <- GET(search_url, timeout(30), add_headers(Authorization = paste('Bearer', access_token)))
if (status_code(response) == 200) {
search_results <- content(response, as = "parsed", type = "application/json")
if (length(search_results$artists$items) > 0) {
return(search_results$artists$items[[1]]$id)
} else {
return(NA)
}
}
}, silent = TRUE)
attempt <- attempt + 1
Sys.sleep(5)  # pause for 5 seconds before retrying
}
return(NA)
}
get_spotify_id('Neil Young')
get_spotify_id <- function(artist_name) {
search_url <- paste0('https://api.spotify.com/v1/search?q=', URLencode(artist_name), '&type=artist&limit=1')
response <- GET(search_url, timeout(30), add_headers(Authorization = paste('Bearer', access_token)))
search_results <- content(response, as = "parsed", type = "application/json")
if (length(search_results$artists$items) > 0) {
return(search_results$artists$items[[1]]$id)
} else {
return(NA)
}
}
get_spotify_id('Neil Young')
get_spotify_id <- function(artist_name) {
search_url <- paste0('https://api.spotify.com/v1/search?q=', URLencode(artist_name), '&type=artist&limit=1')
response <- GET(search_url, timeout(100), add_headers(Authorization = paste('Bearer', access_token)))
search_results <- content(response, as = "parsed", type = "application/json")
if (length(search_results$artists$items) > 0) {
return(search_results$artists$items[[1]]$id)
} else {
return(NA)
}
}
get_spotify_id('Neil Young')
get_spotify_id <- function(artist_name) {
attempt <- 1
max_attempts <- 5
while (attempt <= max_attempts) {
try({
search_url <- paste0('https://api.spotify.com/v1/search?q=', URLencode(artist_name), '&type=artist&limit=1')
response <- GET(search_url, timeout(30), add_headers(Authorization = paste('Bearer', access_token)))
if (status_code(response) == 200) {
search_results <- content(response, as = "parsed", type = "application/json")
if (length(search_results$artists$items) > 0) {
return(search_results$artists$items[[1]]$id)
} else {
return(NA)
}
}
}, silent = TRUE)
attempt <- attempt + 1
Sys.sleep(5)  # pause for 5 seconds before retrying
}
return(NA)
}
get_spotify_id('Neil Young')
get_spotify_artist_ids <- function(artist) {
artist_ids <- sapply(artist$Name, get_spotify_id(name))}
get_spotify_artist_ids(rank_1_50)
get_ids <- function(rank) {for i in 1:nrow(rank){
get_ids <- function(rank) {
for i in 1:nrow(rank){
get_ids <- function(rank) {
for i in (1:nrow(rank)){
get_ids <- function(rank) {
for i in 1:nrow(rank) {
for i in 1:nrow(rank_1_50) {
get_ids <- function(rank) {
for (i in 1:nrow(rank)) {
name <- rank$Name[i]
rank$id[i] <- get_spotify_id(name)
}
return(rank)
}
get_ids(greatest_100_artists)
greatest_100_artists <- get_ids(greatest_100_artists)
get_multiple_artists_details <- function(artist_ids, token) {
valid_ids <- paste(na.omit(artist_ids), collapse = ",")
url <- paste0("https://api.spotify.com/v1/artists/?ids=", valid_ids)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists)
}
update_data <- function(rank){
rank$spotify_id <- get_spotify_artist_ids(rank$Name)
# Fetch the details
artist_details <- get_multiple_artists_details(rank$id, access_token)
# Assuming artist_details_1_50 is a list of artist details
# Create a data frame from the details
details_df <- data.frame(
id = sapply(artist_details, function(x) x$id),
followers = sapply(artist_details, function(x) x$followers$total),
popularity = sapply(artist_details, function(x) x$popularity)
)
# Merge the new details with the original data frame
rank_update <- merge(rank, details_df, by = "id")
return(rank_update)
}
update_data(greatest_100_artists)
get_multiple_artists_details <- function(artist_ids, token) {
valid_ids <- paste(na.omit(artist_ids), collapse = ",")
url <- paste0("https://api.spotify.com/v1/artists/?ids=", valid_ids)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists)
}
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
View(tes)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists$followers$total)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists$followers$total, details$artists$popularity)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists$followers$total)
return(details$artists$popularity)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
parsed_response <- content(response, as = "parsed", type = "application/json")
followers <- parsed_response$artists$followers$total
#details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(followers)
}
get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
parsed_response <- content(response, as = "parsed", type = "application/json")
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
df <- as.data.frame(followers = followers,
popularity = popularity)
return(df)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
parsed_response <- content(response, as = "parsed", type = "application/json")
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
return(list(followers, popularity))
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
parsed_response <- content(response, as = "parsed", type = "application/json")
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
return(followers)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
return(followers)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details$artists$followers$total)
}
get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(details)
}
get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
access_token <- get_spotify_access_token()
get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
return(list(followers, popularity))
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(data) {
id <- data$id
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
# Check if the request was successful
if (status_code(response) != 200) {
stop("API request failed with status code ", status_code(response))
}
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Extract followers and popularity
followers <- sapply(details$artists$followers, `[[`, "total")
popularity <- sapply(details$artists, `[[`, "popularity")
# Create a data frame
df <- data.frame(followers = followers, popularity = popularity)
return(df)
}
get_artist_details <- function(data) {
id <- data$id
token <- access_token
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
# Check if the request was successful
if (status_code(response) != 200) {
stop("API request failed with status code ", status_code(response))
}
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Extract followers and popularity
followers <- sapply(details$artists$followers, `[[`, "total")
popularity <- sapply(details$artists, `[[`, "popularity")
# Create a data frame
df <- data.frame(followers = followers, popularity = popularity)
return(df)
}
get_artist_details <- function(data) {
id <- data$id
token <- access_token
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
# Check if the request was successful
if (status_code(response) != 200) {
stop("API request failed with status code ", status_code(response))
}
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Extract followers and popularity
followers <- sapply(details$artists$followers, `[[`, "total")
popularity <- sapply(details$artists, `[[`, "popularity")
# Create a data frame
df <- data.frame(followers = followers, popularity = popularity)
return(df)
}
tes <- get_artist_details(greatest_100_artists)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
df <- as.data.frame(followers = followers, popularity = popularity)
return(df)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
as.data.frame(1022, 37)
as.data.frame(followers = 1022, popularity = 37)
?as.data.frame()
as.data.frame(c(1022, 37), row.names = c("followers", "pop"))
as.data.frame(c(1022, 37), col.names = c("followers", "pop"))
list(1022,37)
as.data.frame(list(1022,37))
as.data.frame(list(1022,37),col.names = c("followers", "pop"))
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
df <- as.data.frame(list(followers, popularity), col.names = c("followers", popularity))
return(df)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
df <- as.data.frame(list(followers, popularity), col.names = c("followers", "popularity"))
return(df)
}
tes <- get_artist_details("7Ey4PD4MYsKc5I2dolUwbH", access_token)
tes
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, add_headers(`Authorization` = paste("Bearer", token)))
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
df <- as.data.frame(list(followers, popularity), col.names = c("followers", "popularity"))
return(df)
}
for (i in 1:nrow(greatest_100_artists)) {
id <- greatest_100_artists$id[i]
df <- get_artist_details(id, access_token)
greatest_100_artists$followers[i] <- df$followers[i]
greatest_100_artists$popularity[i] <- df$popularity[i]
}
for (i in 1:nrow(greatest_100_artists)) {
attempt <- 1
max_attempts <- 5
while (attempt <= max_attempts) {
try({
id <- greatest_100_artists$id[i]
df <- get_artist_details(id, access_token)
greatest_100_artists$followers[i] <- df$followers[i]
greatest_100_artists$popularity[i] <- df$popularity[i]
}, silent = TRUE)
attempt <- attempt + 1
Sys.sleep(5)
}
}
get_and_update_artist_details <- function(artists_df, token) {
# Function to get artist details
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, timeout(30), add_headers(`Authorization` = paste("Bearer", token)))
# Check for request success
if (status_code(response) != 200) {
warning("Request failed with status code: ", status_code(response))
return(data.frame(followers = NA, popularity = NA))
}
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists[[1]]$followers$total
popularity <- details$artists[[1]]$popularity
return(data.frame(followers = followers, popularity = popularity))
}
# Iterate through each artist in the dataframe
for (i in 1:nrow(artists_df)) {
Sys.sleep(0.5)  # Delay to avoid hitting rate limits
artist_details <- get_artist_details(artists_df$id[i], token)
artists_df$followers[i] <- artist_details$followers
artists_df$popularity[i] <- artist_details$popularity
}
return(artists_df)
}
get_and_update_artist_details <- function(artists_df, token) {
# Function to get artist details
get_artist_details <- function(id) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
response <- GET(url, timeout(30), add_headers(`Authorization` = paste("Bearer", access_token)))
# Check for request success
if (status_code(response) != 200) {
warning("Request failed with status code: ", status_code(response))
return(data.frame(followers = NA, popularity = NA))
}
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists[[1]]$followers$total
popularity <- details$artists[[1]]$popularity
return(data.frame(followers = followers, popularity = popularity))
}
# Iterate through each artist in the dataframe
for (i in 1:nrow(artists_df)) {
Sys.sleep(0.5)  # Delay to avoid hitting rate limits
artist_details <- get_artist_details(artists_df$id[i])
artists_df$followers[i] <- artist_details$followers
artists_df$popularity[i] <- artist_details$popularity
}
return(artists_df)
}
updated_artists_df <- get_and_update_artist_details(greatest_100_artists, access_token)
get_and_update_artist_details <- function(artists_df, token) {
# Function to get artist details
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
attempt <- 1
max_attempts <- 5  # Set the maximum number of retry attempts
while (attempt <= max_attempts) {
response <- tryCatch({
GET(url, timeout(30), add_headers(`Authorization` = paste("Bearer", token)))
}, error = function(e) { NULL })
# Check if the request was successful
if (!is.null(response) && status_code(response) == 200) {
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists[[1]]$followers$total
popularity <- details$artists[[1]]$popularity
return(data.frame(followers = followers, popularity = popularity))
} else {
message(sprintf("Attempt %d failed. Retrying in %d seconds...", attempt, attempt))
Sys.sleep(attempt)  # Exponential back-off
attempt <- attempt + 1
}
}
warning("All attempts failed.")
return(data.frame(followers = NA, popularity = NA))
}
# Iterate through each artist in the dataframe
for (i in 1:nrow(artists_df)) {
Sys.sleep(0.5)  # Delay to avoid hitting rate limits
artist_details <- get_artist_details(artists_df$id[i], token)
artists_df$followers[i] <- artist_details$followers
artists_df$popularity[i] <- artist_details$popularity
}
return(artists_df)
}
updated_artists_df <- get_and_update_artist_details(greatest_100_artists, access_token)
get_and_update_artist_details <- function(artists_df, token) {
# Function to get artist details
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
attempt <- 1
max_attempts <- 5  # Set the maximum number of retry attempts
while (attempt <= max_attempts) {
response <- tryCatch({
GET(url, timeout(30), add_headers(`Authorization` = paste("Bearer", token)))
}, error = function(e) { NULL })
# Check if the request was successful
if (!is.null(response) && status_code(response) == 200) {
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists[[1]]$followers$total
popularity <- details$artists[[1]]$popularity
return(data.frame(followers = followers, popularity = popularity))
} else {
message(sprintf("Attempt %d failed. Retrying in %d seconds...", attempt, attempt))
Sys.sleep(attempt)  # Exponential back-off
attempt <- attempt + 1
}
}
# Ensure returning a dataframe with consistent structure
warning("All attempts failed.")
return(data.frame(followers = NA, popularity = NA))
}
# Iterate through each artist in the dataframe
for (i in 1:nrow(artists_df)) {
Sys.sleep(0.5)  # Delay to avoid hitting rate limits
artist_details <- get_artist_details(artists_df$id[i], token)
# Check if artist_details is not empty before assignment
if (!is.na(artist_details$followers)) {
artists_df$followers[i] <- artist_details$followers
artists_df$popularity[i] <- artist_details$popularity
} else {
artists_df$followers[i] <- NA
artists_df$popularity[i] <- NA
}
}
return(artists_df)
}
source("E:/文件/LSE/MY472/script2.R", echo=TRUE)
updated_artists_df <- get_and_update_artist_details(greatest_100_artists, access_token)
get_artist_details <- function(id, token) {
url <- paste0("https://api.spotify.com/v1/artists/?ids=", id)
attempt <- 1
max_attempts <- 5  # Set the maximum number of retry attempts
while (attempt <= max_attempts) {
response <- tryCatch({
GET(url, timeout(30), add_headers(`Authorization` = paste("Bearer", token)))
}, error = function(e) { NULL })
# Check if the request was successful
if (!is.null(response) && status_code(response) == 200) {
details <- fromJSON(content(response, "text", encoding = "UTF-8"))
followers <- details$artists$followers$total
popularity <- details$artists$popularity
return(data.frame(followers = followers, popularity = popularity))
} else {
message(sprintf("Attempt %d failed. Retrying in %d seconds...", attempt, attempt))
Sys.sleep(attempt)  # Exponential back-off
attempt <- attempt + 1
}
}
warning("All attempts failed.")
return(data.frame(followers = NA, popularity = NA))
}
for (i in 1:nrow(greatest_100_artists)) {
id <- greatest_100_artists$id[i]
df <- get_artist_details(id, access_token)
greatest_100_artists$followers[i] <- df$followers[i]
greatest_100_artists$popularity[i] <- df$popularity[i]
}
greatest_100_artists
for (i in 1:nrow(greatest_100_artists)) {
id <- greatest_100_artists$id[i]
df <- get_artist_details(id, access_token)
greatest_100_artists$followers[i] <- df$followers[1]
greatest_100_artists$popularity[i] <- df$popularity[1]
}
greatest_100_artists
head(greatest_100_artists)
View(greatest_100_artists)
write.csv(greatest_100_artists, "artists_spotify_data", row.names = FALSE)
setwd("~/")
setwd("E:/文件/LSE/MY472/MY472_Assignment4")
write.csv(greatest_100_artists, "artists_spotify_data", row.names = FALSE)
