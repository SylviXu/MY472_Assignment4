"&maxResults=10")  # Request for the top 10 comments.
response <- GET(url)
content <- fromJSON(rawToChar(response$content))
# Extract the comments.
comments <- content$items$snippet$topLevelComment$snippet$textDisplay
combined_comments <- paste(comments, collapse = "\n")
return(combined_comments)
}
Comments <- list()
for (i in length(video_data2)) {
comments <- get_comments(video_data2$VideoID[i], youtube_key)
Comments[i] <- comments
}
Comments
comments <- get_comments(video_data2$VideoID[10], youtube_key)
comments
comments <- get_comments(video_data2$VideoID[1], youtube_key)
comments
cat(comments)
length(video_data2)
video_data2
Comments <- list()
Comments <- data.frame()
for (i in nrow(video_data2)) {
comments <- get_comments(video_data2$VideoID[1], youtube_key)
Comments[i] <- comments
Sys.sleep(3)
}
Comments
Comments <- list()
for (i in nrow(video_data2)) {
comments <- get_comments(video_data2$VideoID[1], youtube_key)
Comments[i] <- comments
Sys.sleep(3)
}
Comments
Comments <- list()
for (i in 1:nrow(video_data2)) {
comments <- get_comments(video_data2$VideoID[1], youtube_key)
Comments[i] <- comments
Sys.sleep(3)
}
Comments
Comments <- list()
for (i in 1:nrow(video_data2)) {
comments <- get_comments(video_data2$VideoID[i], youtube_key)
Comments[i] <- comments
}
Comments
video_data2 <- cbind(video_data2, Comments)
video_data2
View(video_data2)
video_data2 <- video_data2[ ,-8]
video_data2$"" <- NULL
video_data2 <- video_data2[ ,-c(8:26)]
video_data2$Comments <- Comments
Comments
get_comments(video_data2$VideoID[2], youtube_key)
# View the final data.
cat(video_data2)
print(video_data2)
setwd("E:/文件/LSE/MY472/MY472_Assignment4")
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(echo = FALSE)
write.csv(youtube sample data, "video_data2", row.names = FALSE)
write.csv(youtube_sample_data, "video_data2", row.names = FALSE)
# Write the data to local directions.
write.csv(video_data2, "youtube sample data", row.names = FALSE)
video_data2
write.csv(video_data2, "youtube sample data", row.names = FALSE)
class(video_data2$Comments)
class(video_data2$Comments[1])
comments
save(video_data2, file = "youtube_sample_data.RData")
# View the final data.
print(video_data2)
# View the final data.
video_data <- load("youtube_sample_data.RData")
# View the final data.
video_data <- load("youtube_sample_data.RData")
print(video_data)
# View the final data.
video_data <- readRDS("youtube_sample_data.RData")
load("youtube_sample_data.RData")
# View the final data.
load("youtube_sample_data.RData")
print(video_data2)
install.packages("tm")
install.packages("wordcloud")
library(tm)
library(wordcloud)
comments_text <- paste(video_data2$Comments, collapse=" ")
comments_text
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english")) # adjust language as necessary
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
get_comments <- function(video_id, api_key) {
url <- paste0("https://www.googleapis.com/youtube/v3/commentThreads?key=", api_key,
"&textFormat=plainText&part=snippet&videoId=", video_id,
"&maxResults=20")  # Request for the top 10 comments.
response <- GET(url)
content <- fromJSON(rawToChar(response$content))
# Extract the comments.
comments <- content$items$snippet$topLevelComment$snippet$textDisplay
combined_comments <- paste(comments, collapse = "\n")
return(combined_comments)
}
Comments2 <- list()
# Get the top few comments for each video.
for (i in 1:nrow(video_data2)) {
Comments2 <- get_comments(video_data2$VideoID[i], youtube_key)
Comments2[i] <- comments2
}
Comments2 <- list()
# Get the top few comments for each video.
for (i in 1:nrow(video_data2)) {
comments2 <- get_comments(video_data2$VideoID[i], youtube_key)
Comments2[i] <- comments2
}
Comments2
comments_text <- paste(Comments2, collapse=" ")
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english")) # adjust language as necessary
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
get_comments <- function(video_id, api_key) {
url <- paste0("https://www.googleapis.com/youtube/v3/commentThreads?key=", api_key,
"&textFormat=plainText&part=snippet&videoId=", video_id,
"&maxResults=20")  # Request for the top 20 comments.
response <- GET(url)
content <- fromJSON(rawToChar(response$content))
# Extract the comments.
comments <- content$items$snippet$topLevelComment$snippet$textDisplay
combined_comments <- paste(comments, collapse = "\n")
return(combined_comments)
}
Comments <- list()
# Get the top few comments for each video.
for (i in 1:nrow(video_data2)) {
comments <- get_comments(video_data2$VideoID[i], youtube_key)
Comments[i] <- comments
}
video_data2$Comments <- Comments
video_data2
Comments
save(video_data2, file = "youtube_sample_data.RData")
# View the final data.
load("youtube_sample_data.RData")
print(video_data2)
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set3"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set2"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set1"))
ordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark3"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set1"))
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english")) # adjust language as necessary
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.5, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.1, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0.3, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Pastel1"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Pastel2"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Dark3"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Dark2"))
wordcloud(corpus, scale=c(3,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,1), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,0.6), max.words=100, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,0.6), max.words=50, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,0.6), max.words=80, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
#install.packages("tm")
#install.packages("wordcloud")
library(tm)
library(wordcloud)
# Prepare the Text Data
comments_text <- paste(Comments2, collapse=" ")
# Create a Text Corpus and Clean the Data
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english")) # adjust language as necessary
wordcloud(corpus, scale=c(5,0.6), max.words=80, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
wordcloud(corpus, scale=c(5,0.6), max.words=80, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
#install.packages("tm")
#install.packages("wordcloud")
library(tm)
library(wordcloud)
# Prepare the Text Data
comments_text <- paste(Comments2, collapse=" ")
# Create a Text Corpus and Clean the Data
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english")) # adjust language as necessary
wordcloud(corpus, scale=c(5,0.6), max.words=80, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
# =============================================================
install.packages("highcharter")
library(highcharter)
hchart(video_data2, "bar", hcaes(x = Name, y = ViewCount))
hchart(video_data2, "bar", hcaes(x = ViewCount, y = Name, group = ""))
hchart(video_data2, "bar", hcaes(x = ViewCount, y = Name))
hchart(video_data2, "point", hcaes(x = Name, y = ViewCount))
video_data2
library(dplyr)
library(tidyverse)
?pivot_longer
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, CommentCount, LikeCount, FavoriteCount))
transformed_data
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, CommentCount, LikeCount, FavoriteCount),
names_to = "Statistics")
transformed_data
hchart(transformed_data, "line", hcaes(x = Name, y = value, group = Statistics))
#install.packages("highcharter")
library(highcharter)
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, CommentCount, LikeCount, FavoriteCount),
names_to = "Statistics")
hchart(transformed_data, "line", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data,
"bar",
color = c("#7CB5EC", "#F7A35C", "purple"),
hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data,
"bar",
color = c("#7CB5EC", "#F7A35C", "purple", "green"),
hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data,
"line",
color = c("#7CB5EC", "#F7A35C", "purple", "green"),
hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data,
"line",
hcaes(x = Name, y = value, group = Statistics))
#install.packages("highcharter")
library(highcharter)
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, CommentCount, LikeCount, FavoriteCount),
names_to = "Statistics")
hchart(transformed_data,
"line",
hcaes(x = Name, y = value, group = Statistics))
transformed_data
view(transformed_data)
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, LikeCount),
names_to = "Statistics")
view(transformed_data)
transformed_data$value <- as.numeric(transformed_data$value)
view(transformed_data)
hchart(transformed_data, "line", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "point", hcaes(x = Name, y = value, group = Statistics))
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "point", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "line", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
transformed_data <- video_data2 %>%
pivot_longer(cols = c(LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "line", hcaes(x = Name, y = value, group = Statistics))
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
#install.packages("highcharter")
library(highcharter)
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists")
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '10px')))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px'))) %>%
hc_yAxis(labels = list(title = "Followers"))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px'))) %>%
hc_yAxis(labels = list(text = "Followers"))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px'))) %>%
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
# Create a heat map to show the popularity of all artists.
data$hover_info2 <- paste("Name:", data$Name, "<br>Popularity:", data$popularity, "<br>Rank:", data$Rank) # Set the hover information.
heatmap <- ggplot(data, aes(x = Name, y = 1, fill = popularity, text = hover_info2)) +
geom_tile(color = "white") + # Create a tile plot.
labs(title = "P2. The Spotify Popularity Score of the 100 Greates Artists") +
theme_minimal() + # Set up the theme.
theme(plot.title = element_text(face = "bold"), # Set up the title font.
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 8), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap, tooltip = "text") # Display the interactive plot.
library(plotly)
library(ggplot2)
## Visualisation ==========================================================
# Load "plotly" package for generating interactive plots.
library(plotly)
library(ggplot2)
#install.packages("highcharter")
library(highcharter)
# Convert the Name column to a factor and keep the original order.
data$Name <- factor(data$Name, levels = unique(data$Name))
# Use highcharter to create an interactive bar chart.
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
# Create a heat map to show the popularity of all artists.
data$hover_info2 <- paste("Name:", data$Name, "<br>Popularity:", data$popularity, "<br>Rank:", data$Rank) # Set the hover information.
heatmap <- ggplot(data, aes(x = Name, y = 1, fill = popularity, text = hover_info2)) +
geom_tile(color = "white") + # Create a tile plot.
labs(title = "P2. The Spotify Popularity Score of the 100 Greates Artists") +
theme_minimal() + # Set up the theme.
theme(plot.title = element_text(face = "bold"), # Set up the title font.
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 8), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap, tooltip = "text") # Display the interactive plot.
# Create a heat map to show the popularity of all artists.
data$hover_info2 <- paste("Name:", data$Name, "<br>Popularity:", data$popularity, "<br>Rank:", data$Rank) # Set the hover information.
heatmap <- ggplot(data, aes(x = Name, y = 1, fill = popularity, text = hover_info2)) +
geom_tile(color = "white") + # Create a tile plot.
labs(title = "P2. The Spotify Popularity Score of the 100 Greates Artists") +
theme_minimal() + # Set up the theme.
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 8), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap, tooltip = "text") # Display the interactive plot.
# Create a heat map to show the popularity of all artists.
data$hover_info2 <- paste("Name:", data$Name, "<br>Popularity:", data$popularity, "<br>Rank:", data$Rank) # Set the hover information.
heatmap <- ggplot(data, aes(x = Name, y = 1, fill = popularity, text = hover_info2)) +
geom_tile(color = "white") + # Create a tile plot.
labs(title = "P2. The Spotify Popularity Score of the 100 Greates Artists") +
theme_minimal() + # Set up the theme.
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 6), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap, tooltip = "text") # Display the interactive plot.
# Create some popularity thresholds for analysis.
data_reverse <- data[order(-data$popularity),] # Reorder the artists data.
data_reverse$Name <- factor(data_reverse$Name, levels = data_reverse$Name) # Convert the Name column into a factor.
divider_position <- which(data_reverse$popularity == 50)[1] # Find the first threshold where popularity score equals to 50.
divider_position2 <- which(data_reverse$popularity == 75)[2] # Find another threshold where popularity score equals to 75.
# Create another heat map to show the popularity of all artists after sorting in reverse order of the popularity index.
# This is done for comparing the differences between the rankings and popularity of all artists.
heatmap_compare <- ggplot(data, aes(x = reorder(Name, -popularity), y = 1, fill = popularity, text = hover_info2)) +
geom_tile() + # Create a tile plot.
geom_vline(xintercept = divider_position, color = "darkblue", linetype = "dashed", linewidth = 0.3) +
geom_vline(xintercept = divider_position2, color = "darkblue", linetype = "dashed", linewidth = 0.3) +
labs(title = "P2-2. The Spotify Popularity Score of the 100 Greates Artists", x = "Name", y = "", fill = "Popularity") + # Set the labs.
annotate("text", label = "Popularity score: 50", x = divider_position, y = 1, angle = 90, vjust = -0.5, color = "darkblue", size = 3) +
annotate("text", label = "Popularity score: 75", x = divider_position2, y = 1, angle = 90, vjust = -0.5, color = "darkblue", size = 3) +
annotate("text", label = "26%", x = divider_position2/2, y = 1.25, color = "darkgreen") +
annotate("text", label = "64%", x = (divider_position+divider_position2)/2, y = 1.25, color = 'darkgreen') +
annotate("text", label = "10%", x = (divider_position+100)/2, y = 1.25, color = 'darkgreen') +
theme_minimal() + # Set up the theme.
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 6), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap_compare, tooltip = "text") # Display the interactive plot.
transformed_data <- video_data2 %>%
pivot_longer(cols = c(ViewCount, LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
#install.packages("tm")
#install.packages("wordcloud")
library(tm) # Use the "tm" (Text Mining) package to process the text.
library(wordcloud) # Use this package to generate a wordcloud.
# Prepare the Text Data
comments_text <- paste(Comments2, collapse=" ")
# Create a Text Corpus and Clean the Data
corpus <- Corpus(VectorSource(comments_text))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
wordcloud(corpus, scale=c(5,0.6), max.words=80, random.order=FALSE, rot.per=0, colors=brewer.pal(8, "Set1"))
## Visualisation ==========================================================
# Load "plotly" package for generating interactive plots.
library(plotly)
library(ggplot2)
#install.packages("highcharter")
library(highcharter)
# Convert the Name column to a factor and keep the original order.
data$Name <- factor(data$Name, levels = unique(data$Name))
# Use highcharter to create an interactive bar chart.
hchart(data, "bar", hcaes(x = Name, y = followers)) %>%
hc_title(text = "P1. The Spotify Followers of the 100 Greatest Artists") %>%
hc_xAxis(labels = list(style = list(fontSize = '8px')))
# Create a heat map to show the popularity of all artists.
data$hover_info2 <- paste("Name:", data$Name, "<br>Popularity:", data$popularity, "<br>Rank:", data$Rank) # Set the hover information.
heatmap <- ggplot(data, aes(x = Name, y = 1, fill = popularity, text = hover_info2)) +
geom_tile(color = "white") + # Create a tile plot.
labs(title = "P2. The Spotify Popularity Score of the 100 Greates Artists") +
theme_minimal() + # Set up the theme.
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 6), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap, tooltip = "text") # Display the interactive plot.
# Create some popularity thresholds for analysis.
data_reverse <- data[order(-data$popularity),] # Reorder the artists data.
data_reverse$Name <- factor(data_reverse$Name, levels = data_reverse$Name) # Convert the Name column into a factor.
divider_position <- which(data_reverse$popularity == 50)[1] # Find the first threshold where popularity score equals to 50.
divider_position2 <- which(data_reverse$popularity == 75)[2] # Find another threshold where popularity score equals to 75.
# Create another heat map to show the popularity of all artists after sorting in reverse order of the popularity index.
# This is done for comparing the differences between the rankings and popularity of all artists.
heatmap_compare <- ggplot(data, aes(x = reorder(Name, -popularity), y = 1, fill = popularity, text = hover_info2)) +
geom_tile() + # Create a tile plot.
geom_vline(xintercept = divider_position, color = "darkblue", linetype = "dashed", linewidth = 0.3) +
geom_vline(xintercept = divider_position2, color = "darkblue", linetype = "dashed", linewidth = 0.3) +
labs(title = "P2-2. The Spotify Popularity Score of the 100 Greates Artists", x = "Name", y = "", fill = "Popularity") + # Set the labs.
annotate("text", label = "Popularity score: 50", x = divider_position, y = 1, angle = 90, vjust = -0.5, color = "darkblue", size = 3) +
annotate("text", label = "Popularity score: 75", x = divider_position2, y = 1, angle = 90, vjust = -0.5, color = "darkblue", size = 3) +
annotate("text", label = "26%", x = divider_position2/2, y = 1.25, color = "darkgreen") +
annotate("text", label = "64%", x = (divider_position+divider_position2)/2, y = 1.25, color = 'darkgreen') +
annotate("text", label = "10%", x = (divider_position+100)/2, y = 1.25, color = 'darkgreen') +
theme_minimal() + # Set up the theme.
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 6), # Set the text of the x axis.
axis.text.y = element_blank(), # Hide the text of the y axis.
axis.ticks.y = element_blank(), # Hide the scale on the y axis of the chart.
axis.title.y = element_blank(), # Hide the title of the y axis.
axis.title.x = element_blank(), # Hide the title of the x axis.
panel.grid = element_blank()) + # Hide the grid.
scale_fill_gradientn(colors = c("white", "lightyellow", "red")) # Specify a gradient fill.
ggplotly(heatmap_compare, tooltip = "text") # Display the interactive plot.
transformed_data <- video_data2 %>%
pivot_longer(cols = c(LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
hchart(video_data2, "bar", hcaes(x = Name, y = ViewCounts))
hchart(video_data2, "bar", hcaes(x = Name, y = ViewCount))
transformed_data <- video_data2 %>%
pivot_longer(cols = c(LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics))
video_data2$ViewCount <- as.numeric(video_data2$ViewCount)
hchart(video_data2, "bar", hcaes(x = Name, y = ViewCount))
transformed_data <- video_data2 %>%
pivot_longer(cols = c(LikeCount, CommentCount),
names_to = "Statistics")
transformed_data$value <- as.numeric(transformed_data$value)
hchart(transformed_data, "bar", hcaes(x = Name, y = value, group = Statistics)) %>%
hc_title(text = "P3. Statistics of the Latest Videos of Sample Artists")
video_data2$ViewCount <- as.numeric(video_data2$ViewCount)
hchart(video_data2, "bar", hcaes(x = Name, y = ViewCount)) %>%
hc_title(text = "P3-2. Sample Artist's Latest Video Views")
View(data)
